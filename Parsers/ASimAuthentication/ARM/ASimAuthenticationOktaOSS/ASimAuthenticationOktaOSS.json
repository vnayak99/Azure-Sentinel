{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimAuthenticationOktaSSO",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Authentication ASIM parser for Okta",
            "category": "ASIM",
            "FunctionAlias": "ASimAuthenticationOktaSSO",
            "query": "let parser=(disabled:bool=false)\n{\n  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);\n  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);\n  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);\n  let emptyTable = datatable(TimeGenerated:datetime)[];\n  // https://developer.okta.com/docs/reference/api/event-types/#catalog\n  let OktaV1 = union isfuzzy=true emptyTable, Okta_CL \n    | where not(disabled)\n    | extend outcome_result_s=column_ifexists('outcome_result_s', \"\")\n    , eventType_s=column_ifexists('eventType_s', \"\")\n    , legacyEventType_s=column_ifexists('legacyEventType_s', \"\")\n    , client_geographicalContext_geolocation_lat_d=column_ifexists('client_geographicalContext_geolocation_lat_d', \"\")\n    , client_geographicalContext_geolocation_lon_d=column_ifexists('client_geographicalContext_geolocation_lon_d', \"\")\n    | where eventType_s in (OktaSigninEvents)\n    | extend \n    EventProduct='Okta'\n    , EventVendor='Okta'\n    , EventSchema = 'Authentication'\n    , EventCount=int(1)\n    , EventSchemaVersion='0.1.0'\n    , EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')\n    , EventStartTime=TimeGenerated\n    , EventEndTime=TimeGenerated\n    , EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')\n    , EventSubType=legacyEventType_s\n    , EventMessage=column_ifexists('displayMessage_s', \"\")\n    , EventOriginalResultDetails=column_ifexists('outcome_reason_s', \"\")\n    , EventOriginalUid = column_ifexists('uuid_g', \"\")\n    , TargetUserIdType='OktaId'\n    , TargetUsernameType='UPN'\n    , TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', \"\")\n    , TargetUserId=column_ifexists('actor_id_s', \"\")\n    , TargetUsername=column_ifexists('actor_alternateId_s', \"\")\n    , TargetUserType=column_ifexists('actor_type_s', \"\")\n    , SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)\n    , SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)\n    , SrcDvcOs=column_ifexists('client_userAgent_os_s', \"\")\n    , SrcIsp=column_ifexists('securityContext_isp_s', \"\")\n    , SrcGeoCity=column_ifexists('client_geographicalContext_city_s', \"\")\n    , SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', \"\")\n    , SrcIpAddr = column_ifexists('client_ipAddress_s', \"\")\n    , ActingAppName=column_ifexists('client_userAgent_browser_s', \"\")\n    , ActingAppType=\"Browser\"\n    , LogonMethod=column_ifexists('authenticationContext_credentialType_s', \"\")\n    , HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', \"\")\n  // ** Aliases\n  | extend \n    User=TargetUsername\n    , Dvc=EventVendor\n    , IpAddr=SrcIpAddr\n  | project-away*_s,*_d,*_b,*_g,*_t;\n  let OktaV2 = union isfuzzy=true emptyTable, OktaV2_CL\n    | where not(disabled)      \n    | extend EventOriginalType=column_ifexists('EventOriginalType', \"\") \n    | where EventOriginalType in (OktaSigninEvents)\n    | extend \n    EventProduct='Okta'\n    , EventSchema = 'Authentication'\n    , EventVendor='Okta'\n    , EventCount=int(1)\n    , EventSchemaVersion='0.1.0'\n    , EventStartTime=TimeGenerated\n    , EventEndTime=TimeGenerated\n    , EventType=iff(EventOriginalType hassuffix 'start', 'Logon', 'Logoff')       \n    , TargetSessionId=column_ifexists('ActorSessionId', \"\")\n    , TargetUserId= column_ifexists('ActorUserId', \"\")\n    , TargetUsername=column_ifexists('ActorUsername', \"\")\n    , TargetUserType=column_ifexists('ActorUserType', \"\")\n    , TargetUserIdType=column_ifexists('ActorUserIdType', \"\")\n    , TargetUsernameType=column_ifexists('ActorUsernameType', \"\")\n    , SrcIpAddr = column_ifexists('SrcIpAddr', \"\")\n    //** extend non-normalized fields to be projected-away \n    , ActorDetailEntry, ActorDisplayName, AuthenticationContextAuthenticationProvider, AuthenticationContextAuthenticationStep\n    , AuthenticationContextCredentialProvider, AuthenticationContextInterface, AuthenticationContextIssuerId, AuthenticationContextIssuerType\n    , DebugData, DvcAction, OriginalActorAlternateId, OriginalClientDevice, OriginalOutcomeResult, OriginalSeverity, OriginalTarget\n    , OriginalUserId, OriginalUserType, Request, SecurityContextAsNumber, SecurityContextAsOrg, SecurityContextDomain, SecurityContextIsProxy\n    , TransactionDetail, TransactionId, TransactionType\n  // ** Aliases\n  | extend \n    User=TargetUsername\n    , Dvc=EventVendor\n    , IpAddr=SrcIpAddr\n  | project-away ActorDetailEntry, ActorDisplayName, AuthenticationContextAuthenticationProvider, AuthenticationContextAuthenticationStep\n    , AuthenticationContextCredentialProvider, AuthenticationContextInterface, AuthenticationContextIssuerId, AuthenticationContextIssuerType\n    , DebugData, DvcAction, OriginalActorAlternateId, OriginalClientDevice, OriginalOutcomeResult, OriginalSeverity, OriginalTarget\n    , OriginalUserId, OriginalUserType, Request, SecurityContextAsNumber, SecurityContextAsOrg, SecurityContextDomain, SecurityContextIsProxy\n    , TransactionDetail, TransactionId, TransactionType;\n  union isfuzzy=true OktaV1, OktaV2\n};\nparser(disabled = disabled)\n",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}