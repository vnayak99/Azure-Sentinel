Parser:
  Title: Authentication ASIM parser for Okta
  Version: '0.2.2'
  LastUpdated: Sept. 07, 2023
Product:
  Name: Okta
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
  - Title: ASIM Authentication Schema
    Link: https://aka.ms/ASimAuthenticationDoc
  - Title: ASIM
    Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Okta sign in logs, stored in the Okta_CL table and in OktaV2_CL table, to the ASIM Authentication schema.
ParserName: ASimAuthenticationOktaSSO
EquivalentBuiltInParser: _ASim_Authentication_OktaSSO
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser=(disabled:bool=false)
  {
    let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
    let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
    let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
    let emptyTable = datatable(TimeGenerated:datetime)[];
    // https://developer.okta.com/docs/reference/api/event-types/#catalog
    let OktaV1 = union isfuzzy=true emptyTable, Okta_CL 
      | where not(disabled)
      | extend outcome_result_s=column_ifexists('outcome_result_s', "")
      , eventType_s=column_ifexists('eventType_s', "")
      , legacyEventType_s=column_ifexists('legacyEventType_s', "")
      , client_geographicalContext_geolocation_lat_d=column_ifexists('client_geographicalContext_geolocation_lat_d', "")
      , client_geographicalContext_geolocation_lon_d=column_ifexists('client_geographicalContext_geolocation_lon_d', "")
      | where eventType_s in (OktaSigninEvents)
      | extend 
      EventProduct='Okta'
      , EventVendor='Okta'
      , EventSchema = 'Authentication'
      , EventCount=int(1)
      , EventSchemaVersion='0.1.0'
      , EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')
      , EventStartTime=TimeGenerated
      , EventEndTime=TimeGenerated
      , EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')
      , EventSubType=legacyEventType_s
      , EventMessage=column_ifexists('displayMessage_s', "")
      , EventOriginalResultDetails=column_ifexists('outcome_reason_s', "")
      , EventOriginalUid = column_ifexists('uuid_g', "")
      , TargetUserIdType='OktaId'
      , TargetUsernameType='UPN'
      , TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', "")
      , TargetUserId=column_ifexists('actor_id_s', "")
      , TargetUsername=column_ifexists('actor_alternateId_s', "")
      , TargetUserType=column_ifexists('actor_type_s', "")
      , SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)
      , SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)
      , SrcDvcOs=column_ifexists('client_userAgent_os_s', "")
      , SrcIsp=column_ifexists('securityContext_isp_s', "")
      , SrcGeoCity=column_ifexists('client_geographicalContext_city_s', "")
      , SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', "")
      , SrcIpAddr = column_ifexists('client_ipAddress_s', "")
      , ActingAppName=column_ifexists('client_userAgent_browser_s', "")
      , ActingAppType="Browser"
      , LogonMethod=column_ifexists('authenticationContext_credentialType_s', "")
      , HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', "")
    // ** Aliases
    | extend 
      User=TargetUsername
      , Dvc=EventVendor
      , IpAddr=SrcIpAddr
    | project-away*_s,*_d,*_b,*_g,*_t;
    let OktaV2 = union isfuzzy=true emptyTable, OktaV2_CL
      | where not(disabled)      
      | extend EventOriginalType=column_ifexists('EventOriginalType', "") 
      | where EventOriginalType in (OktaSigninEvents)
      | extend 
      EventProduct='Okta'
      , EventSchema = 'Authentication'
      , EventVendor='Okta'
      , EventCount=int(1)
      , EventSchemaVersion='0.1.0'
      , EventStartTime=TimeGenerated
      , EventEndTime=TimeGenerated
      , EventType=iff(EventOriginalType hassuffix 'start', 'Logon', 'Logoff')       
      , TargetSessionId=column_ifexists('ActorSessionId', "")
      , TargetUserId= column_ifexists('ActorUserId', "")
      , TargetUsername=column_ifexists('ActorUsername', "")
      , TargetUserType=column_ifexists('ActorUserType', "")
      , TargetUserIdType=column_ifexists('ActorUserIdType', "")
      , TargetUsernameType=column_ifexists('ActorUsernameType', "")
      , SrcIpAddr = column_ifexists('SrcIpAddr', "")
      //** extend non-normalized fields to be projected-away 
      , ActorDetailEntry, ActorDisplayName, AuthenticationContextAuthenticationProvider, AuthenticationContextAuthenticationStep
      , AuthenticationContextCredentialProvider, AuthenticationContextInterface, AuthenticationContextIssuerId, AuthenticationContextIssuerType
      , DebugData, DvcAction, OriginalActorAlternateId, OriginalClientDevice, OriginalOutcomeResult, OriginalSeverity, OriginalTarget
      , OriginalUserId, OriginalUserType, Request, SecurityContextAsNumber, SecurityContextAsOrg, SecurityContextDomain, SecurityContextIsProxy
      , TransactionDetail, TransactionId, TransactionType
    // ** Aliases
    | extend 
      User=TargetUsername
      , Dvc=EventVendor
      , IpAddr=SrcIpAddr
    | project-away ActorDetailEntry, ActorDisplayName, AuthenticationContextAuthenticationProvider, AuthenticationContextAuthenticationStep
      , AuthenticationContextCredentialProvider, AuthenticationContextInterface, AuthenticationContextIssuerId, AuthenticationContextIssuerType
      , DebugData, DvcAction, OriginalActorAlternateId, OriginalClientDevice, OriginalOutcomeResult, OriginalSeverity, OriginalTarget
      , OriginalUserId, OriginalUserType, Request, SecurityContextAsNumber, SecurityContextAsOrg, SecurityContextDomain, SecurityContextIsProxy
      , TransactionDetail, TransactionId, TransactionType;
    union isfuzzy=true OktaV1, OktaV2
  };
  parser(disabled = disabled)
