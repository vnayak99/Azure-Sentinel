Parser:
  Title: Authentication ASIM filtering parser for AAD interactive sign-in logs
  Version: '0.3.1'
  LastUpdated: Sept 18, 2023
Product:
  Name: AAD
Normalization:
  Schema: Authentication
  Version: '0.1.0'
References:
- Title: Using functions
  Link: https://docs.microsoft.com/azure/azure-monitor/log-query/function
- Title: Authentication schema documentation
  Link: https://aka.ms/ASimAuthenticationDoc
Description: |
  This ASIM parser supports filtering and normalizing Azure Active Directory Interactive sign in logs, stored in the  SigninLogs table, to the ASIM Authentication schema.
ParserName: vimAuthenticationSigninLogs
EquivalentBuiltInParser: _Im_Authentication_SigninLogs
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: targetusername_has
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let FailedReason=datatable(ResultType:string, EventResultDetails:string)[
    '0', 'Success',
    '53003', 'Logon violates policy',
    '50034', 'No such user or password',
    '50059', 'No such user or password',
    '50053', 'User locked',
    '50055', 'Password expired',
    '50056', 'Incorrect password',
    '50057', 'User disabled',
    '50058', 'Logon violates policy',
    '50011', 'Logon violates policy', 
    '50064', 'No such user or password',
    '50076', 'Logon violates policy',
    '50079', 'Logon violates policy',
    '50105', 'Logon violates policy',
    '50126', 'No such user or password',
    '50132', 'Password expired',
    '50133', 'Password expired',
    '50144', 'Password expired',
    '50173', 'Password expired',
    '80012', 'Logon violates policy',
    '51004', 'No such user or password',
    '50072', 'Logon violates policy',
    '50005', 'Logon violates policy',
    '50020', 'Logon violates policy',
    '50074', 'Logon violates policy', 
    '70008', 'Password expired',
    '700016',  'No such user or password', 
    '500011', 'No such user or password' 
    ];
  let UserTypeLookup = datatable (UserType:string, TargetUserType:string) [
    'Member', 'Regular',
    'Guest','Guest', 
    '',''
  ];
  let AADSigninLogs=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), targetusername_has:string="*", disabled:bool=false){
  SigninLogs | where not(disabled)
  // ************************************************************************* 
  //       <Prefilterring>
  // *************************************************************************
  | where 
    (isnull(starttime)   or TimeGenerated >= starttime) 
    and (isnull(endtime)     or TimeGenerated <= endtime) 
    and (targetusername_has=='*' or (UserPrincipalName has targetusername_has ))
  // ************************************************************************* 
  //       </Prefilterring>
  // ************************************************************************* 
  | extend
    EventVendor = 'Microsoft'
    , EventProduct = 'AAD'
    , EventCount=int(1)
    , EventSchemaVersion='0.1.0'
    , EventResult = iff (ResultType ==0, 'Success', 'Failure')
    , EventOriginalResultDetails = coalesce(ResultDescription, ResultType)
    , EventStartTime = TimeGenerated
    , EventEndTime= TimeGenerated
    , EventType= 'Logon'
    , SrcDvcId=tostring(DeviceDetail.deviceId)
    , SrcDvcHostname =tostring(DeviceDetail.displayName)
    , SrcDvcOs=tostring(DeviceDetail.operatingSystem)
    // , SrcBrowser= tostring(DeviceDetail.browser)
    , Location = todynamic(LocationDetails)
    , TargetUsernameType='Upn'
    , TargetUserIdType='AADID'
    , SrcDvcIpAddr=IPAddress
  | extend
        SrcGeoCity=tostring(Location.city)
        , SrcGeoCountry=tostring(Location.countryOrRegion)
        , SrcGeoLatitude=toreal(Location.geoCoordinates.latitude)
        , SrcGeoLongitude=toreal(Location.geoCoordinates.longitude)
   | lookup FailedReason on ResultType
   | project-rename
       EventOriginalUid =Id
       , LogonMethod  = AuthenticationRequirement
       , HttpUserAgent=UserAgent
       , TargetSessionId=CorrelationId
       , TargetUserId = UserId
       , TargetUsername=UserPrincipalName
       , TargetAppId = ResourceIdentity
       , TargetAppName=ResourceDisplayName
    | lookup UserTypeLookup on UserType
    | project-away UserType
    // ** Aliases
    | extend 
      User=TargetUsername
    , LogonTarget=TargetAppName
    , Dvc=EventVendor
    // -- Entity identifier explicit aliases
    , TargetUserUpn = TargetUsername
    , TargetUserAadId = TargetUserId        
    };
  AADSigninLogs(starttime, endtime, targetusername_has, disabled)
